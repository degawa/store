#:include "../common.fypp"
module store_intrinsic_char
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    public :: store
    public :: store_a

    interface store
        procedure :: store_char
        #:for rank in RANKS
        procedure :: store_char_rank${rank}$
        #:endfor
    end interface

    interface store_a
        procedure :: store_char_a
        #:for rank in RANKS
        procedure :: store_char_rank${rank}$_a
        #:endfor
    end interface
contains
    !>stores `value` to `var` if `var` is presented.
    subroutine store_char(var, value)
        implicit none
        character, intent(out), optional :: var
        character, intent(in) :: value

        if (present(var)) then
            var = value
        end if
    end subroutine store_char

    #:for rank in RANKS
    !>stores `value` to `var` if `var` is presented.
    subroutine store_char_rank${rank}$(var, value)
        implicit none
        character, intent(out), optional :: var${rank_suffix(rank)}$
        character, intent(in) :: value${rank_suffix(rank)}$

        if (present(var)) then
            var = value
        end if
    end subroutine store_char_rank${rank}$

    #:endfor
    !>stores `value` to `var` if `var` is presented.
    subroutine store_char_a(var, value)
        implicit none
        character, allocatable, intent(out), optional :: var
        character, intent(in) :: value

        if (present(var)) then
            var = value
        end if
    end subroutine store_char_a

    #:for rank in RANKS
    !>stores `value` to `var` if `var` is presented.
    subroutine store_char_rank${rank}$_a(var, value)
        implicit none
        character, allocatable, intent(out), optional :: var${rank_suffix(rank)}$
        character, intent(in) :: value${rank_suffix(rank)}$

        if (present(var)) then
            var = value
        end if
    end subroutine store_char_rank${rank}$_a

    #:endfor
end module store_intrinsic_char
