#:include "../common.fypp"
module store_intrinsic
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    #:for alloc_attr in ALLOCATABLE_ATTR
    public :: store${alloc_suffix(alloc_attr)}$
    #:endfor

    #:for alloc_attr in ALLOCATABLE_ATTR
    interface store${alloc_suffix(alloc_attr)}$
        #:for kind in INTRINSIC_KINDS
        procedure :: store_${kind}$${alloc_suffix(alloc_attr)}$
        #:for rank in RANKS
        procedure :: store_${kind}$_rank${rank}$${alloc_suffix(alloc_attr)}$
        #:endfor
        #:endfor
    end interface

    #:endfor
contains
   #:for alloc_attr in ALLOCATABLE_ATTR
    #:for kind, type in INTRINSIC_KINDS_TYPES
    !>stores `value` to `var` if `var` is presented.
    subroutine store_${kind}$${alloc_suffix(alloc_attr)}$(var, value)
        implicit none
        ${alloc_type(type, alloc_attr)}$, intent(out), optional :: var
        ${type}$, intent(in) :: value

        if (present(var)) then
            var = value
        end if
    end subroutine store_${kind}$${alloc_suffix(alloc_attr)}$

    #:for rank in RANKS
    !>stores `value` to `var` if `var` is presented.
    subroutine store_${kind}$_rank${rank}$${alloc_suffix(alloc_attr)}$(var, value)
        implicit none
        ${alloc_type(type, alloc_attr)}$, intent(out), optional :: var${rank_suffix(rank)}$
        ${type}$, intent(in) :: value${rank_suffix(rank)}$

        if (present(var)) then
            var = value
        end if
    end subroutine store_${kind}$_rank${rank}$${alloc_suffix(alloc_attr)}$

    #:endfor
    #:endfor
    #:endfor
end module store_intrinsic
